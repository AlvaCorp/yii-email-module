{"name":"Yii Email Module","tagline":"Easily configurable and powerful email system with templates and email queuing.","body":"# Yii Email Module\r\n\r\nEasily configurable and powerful email system with templates and email queuing.\r\n\r\n\r\n### Contents\r\n\r\n- [Features](#features)\r\n- [Screenshots](#screenshots)\r\n- [Installation](#installation)\r\n\t- [Composer Installation](#composer-installation)\r\n\t- [Manual Installation](#manual-installation)\r\n- [Configuration](#configuration)\r\n- [Usage](#usage)\r\n\t- [Simple Usage](#simple-usage)\r\n\t- [Using Templates](#using-templates)\r\n\t\t- [Component](#component)\r\n\t\t- [PHP Templates](#php-templates)\r\n\t\t- [DB Templates](#db-templates)\r\n\t\t- [Sending the Email](#sending-the-email)\r\n\t- [Sending Spooled Emails](#sending-spooled-emails)\r\n\t- [Automatically Sending](#automatically-sending)\r\n\t- [Extending EEmailManager](#extending-eemailmanager)\r\n- [FAQ](#faq)\r\n\t- [What is the difference between a template and a layout?](#what-is-the-difference-between-a-template-and-a-layout)\r\n\t- [Do layout variables subject, heading and message need to be defined when calling buildTemplateMessage() function?](#do-layout-variables-subject-heading-and-message-need-to-be-defined-when-calling-buildtemplatemessage-function)\r\n\t- [Why does HTML code get replaced htmlencoded output when using db templates rendered with Mustache?](#why-does-html-code-get-replaced-htmlencoded-output-when-using-db-templates-rendered-with-mustache)\r\n- [Resources](#resources)\r\n- [Support](#support)\r\n- [License](#license)\r\n\r\n\r\n## Features\r\n\r\n- Emails can be sent directly, or saved into a spool to be sent later.\r\n- Templates can be normal php files, or stored in the database and rendered with Mustache\r\n- Emails are built and send using SwiftMailer\r\n\r\n\r\n## Screenshots\r\n\r\nYii Email Module Homepage:\r\n![home](https://raw.github.com/cornernote/yii-email-module/master/screenshot/home.png)\r\n\r\nSpool List\r\n![Requests](https://raw.github.com/cornernote/yii-email-module/master/screenshot/spools.png)\r\n\r\nSpool View\r\n![Request](https://raw.github.com/cornernote/yii-email-module/master/screenshot/spool.png)\r\n\r\nSpool Preview\r\n![Request](https://raw.github.com/cornernote/yii-email-module/master/screenshot/spool-preview.png)\r\n\r\nTemplate List\r\n![Requests](https://raw.github.com/cornernote/yii-email-module/master/screenshot/templates.png)\r\n\r\nTemplate View\r\n![Request](https://raw.github.com/cornernote/yii-email-module/master/screenshot/template.png)\r\n\r\nTemplate Preview\r\n![Request](https://raw.github.com/cornernote/yii-email-module/master/screenshot/template-preview.png)\r\n\r\n\r\n## Installation\r\n\r\nPlease download using ONE of the following methods:\r\n\r\n\r\n### Composer Installation\r\n\r\nAll requirements are automatically downloaded into the correct location when using composer.  There is no need to download additional files or set paths to third party files.\r\n\r\nGet composer:\r\n\r\n```\r\ncurl http://getcomposer.org/installer | php\r\n```\r\n\r\nInstall latest release OR development version:\r\n\r\n```\r\nphp composer.phar require cornernote/yii-email-module:*\t\t\t\t// latest release\r\nphp composer.phar require cornernote/yii-email-module:dev-master\t// development version\r\n```\r\n\r\nAdd the `vendor` folder to the `aliases` in your yii configuration:\r\n\r\n```php\r\nreturn array(\r\n\t'aliases' => array(\r\n\t\t'vendor' => '/path/to/vendor',\r\n\t),\r\n);\r\n```\r\n\r\n\r\n### Manual Installation\r\n\r\nDownload the [latest release](https://github.com/cornernote/yii-email-module/releases/latest) or [development version](https://github.com/cornernote/yii-email-module/archive/master.zip) and move the `email` folder into your `protected/modules` folder.\r\n\r\nIn addition the following are required:\r\n* [YiiStrap](http://www.getyiistrap.com) for the interface elements.  Please follow their Getting Started guide to setup the aliases and components for your application.\r\n* [SwiftMailer](http://swiftmailer.org/) to send emails.  Please download and setup the swiftMailerPath as per the Configuration below.\r\n* [MustachePHP](https://github.com/bobthecow/mustache.php) to render database templates.  Please download and setup the mustachePath as per the Configuration below.\r\n\r\n\r\n## Configuration\r\n\r\nAdd yii-email-module to the `modules` in your yii configuration:\r\n\r\n```php\r\nreturn array(\r\n\t'modules' => array(\r\n\t\t'email' => array(\r\n\t\t\t// path to the EmailModule class\r\n\t\t\t'class' => '/path/to/vendor/cornernote/yii-email-module/email/EmailModule',\r\n\r\n\t\t\t// The ID of the CDbConnection application component. If not set, a SQLite3\r\n\t\t\t// database will be automatically created in protected/runtime/email-EmailVersion.db.\r\n\t\t\t'connectionID' => 'db',\r\n\r\n\t\t\t// Whether the DB tables should be created automatically if they do not exist. Defaults to true.\r\n\t\t\t// If you already have the table created, it is recommended you set this property to be false to improve performance.\r\n\t\t\t'autoCreateTables' => true,\r\n\r\n\t\t\t// The layout used for module controllers.\r\n\t\t\t'layout' => 'email.views.layouts.column1',\r\n\r\n\t\t\t// Defines the access filters for the module.\r\n\t\t\t// The default is EmailAccessFilter which will allow any user listed in EmailModule::adminUsers to have access.\r\n\t\t\t'controllerFilters' => array(\r\n\t\t\t\t'emailAccess' => array('email.components.EmailAccessFilter'),\r\n\t\t\t),\r\n\r\n\t\t\t// A list of users who can access this module.\r\n\t\t\t'adminUsers' => array('admin'),\r\n\r\n\t\t\t// The path to YiiStrap.\r\n\t\t\t// Only required if you do not want YiiStrap in your app config, for example, if you are running YiiBooster.\r\n\t\t\t// Only required if you did not install using composer.\r\n\t\t\t'yiiStrapPath' => '/path/to/vendor/crisu83/yiistrap',\r\n\t\t),\r\n\t),\r\n);\r\n```\r\n\r\nAdd `EEmailManager` to the `components` section in your yii configuration:\r\n\r\n```php\r\nreturn array(\r\n\t'components' => array(\r\n\t\t'emailManager' => array(\r\n\t\t\t// path to the EEmailManager class\r\n\t\t\t'class' => 'email.components.EEmailManager',\r\n\r\n\t\t\t// Path to the SwiftMailer lib folder.\r\n\t\t\t// Only required if you did not install using composer.\r\n\t\t\t'swiftMailerPath' => '/path/to/vendor/swiftmailer/swiftmailer/lib',\r\n\r\n\t\t\t// Path to the Mustache src folder.\r\n\t\t\t// Only required then templateType is set to \"db\".\r\n\t\t\t// Only required if you did not install using composer.\r\n\t\t\t'mustachePath' => '/path/to/vendor/mustache/mustache/src',\r\n\r\n\t\t\t// Default from email address.\r\n\t\t\t'fromEmail' => 'webmaster@your.dom.ain',\r\n\r\n\t\t\t// Default from name.\r\n\t\t\t// If unset the application name is used.\r\n\t\t\t'fromName' => null,\r\n\r\n\t\t\t// Template type, can be one of: php, db.\r\n\t\t\t'templateType' => 'php',\r\n\r\n\t\t\t// When templateType=php this is the path to the email views.\r\n\t\t\t// You may copy the default templates from email/views/emails.\r\n\t\t\t'templatePath' => 'application.views.emails',\r\n\r\n\t\t\t// List of template parts that will be rendered.\r\n\t\t\t'templateFields' => array('subject', 'heading', 'message'),\r\n\r\n\t\t\t// The default transport to use.\r\n\t\t\t// For this example you can use \"mail\", \"smtp\" or \"anotherSmtp\".\r\n\t\t\t'defaultTransport' => 'mail',\r\n\r\n\t\t\t// A list of email transport methods, for example:\r\n\t\t\t//\tarray(\r\n\t\t\t// \t\t'transport_name_or_id' => array(\r\n\t\t\t//\t\t\t// the class name of the Swift_Transport subclass\r\n\t\t\t//\t\t\t'class' => 'Swift_Transport',\r\n\t\t\t//\t\t\t// set Swift_Transport::property1 to \"my value\"\r\n\t\t\t//\t\t\t'property1' => 'my value',\r\n\t\t\t//\t\t\t// call Swift_Transport::setProperty2(\"my value\")\r\n\t\t\t//\t\t\t'setters' => array(\r\n\t\t\t//\t\t\t\t'property2' => 'my value',\r\n\t\t\t//\t\t\t),\r\n\t\t\t//\t\t),\r\n\t\t\t//\t)\r\n\t\t\t'transports' => array(\r\n\r\n\t\t\t\t// mail transport\r\n\t\t\t\t'mail' => array(\r\n\t\t\t\t\t// can be Swift_MailTransport or Swift_SmtpTransport\r\n\t\t\t\t\t'class' => 'Swift_MailTransport',\r\n\t\t\t\t),\r\n\r\n\t\t\t\t// smtp transport\r\n\t\t\t\t'smtp' => array(\r\n\t\t\t\t\t// if you use smtp you may need to define the host, port, security and setters\r\n\t\t\t\t\t'class' => 'Swift_SmtpTransport',\r\n\t\t\t\t\t'host' => 'localhost',\r\n\t\t\t\t\t'port' => 25,\r\n\t\t\t\t\t'security' => null,\r\n\t\t\t\t\t'setters' => array(\r\n\t\t\t\t\t\t'username' => 'your_username',\r\n\t\t\t\t\t\t'password' => 'your_password',\r\n\t\t\t\t\t),\r\n\t\t\t\t),\r\n\r\n\t\t\t\t// another smtp transport\r\n\t\t\t\t'anotherSmtp' => array(\r\n\t\t\t\t\t'class' => 'Swift_SmtpTransport',\r\n\t\t\t\t\t'host' => 'localhost',\r\n\t\t\t\t\t'port' => 25,\r\n\t\t\t\t\t'security' => null,\r\n\t\t\t\t\t'setters' => array(\r\n\t\t\t\t\t\t'username' => 'another_username',\r\n\t\t\t\t\t\t'password' => 'another_password',\r\n\t\t\t\t\t),\r\n\t\t\t\t),\r\n\t\t\t),\r\n\r\n\t\t),\r\n\t),\r\n);\r\n```\r\n\r\nTo use the commands that are included with yii-email-manager, add the following to the `commandMap` section of your yiic configuration:\r\n\r\n```php\r\nreturn array(\r\n\t'commandMap' => array(\r\n\t\t'emailSpool' => 'email.commands.EmailSpoolCommand',\r\n\t),\r\n);\r\n```\r\n\r\n\r\n## Usage\r\n\r\n\r\n### Simple Usage\r\n\r\n```php\r\nYii::app()->emailManager->email('user@dom.ain', 'test email', '<b>Hello</b> <i>World<i>!');\r\n```\r\n\r\n\r\n### Using Templates\r\n\r\nTo send more complex emails you will need to use Email Templates.\r\n\r\n\r\n#### Component\r\n\r\nCreate a new component in `components/Email.php`:\r\n\r\n```php\r\nclass Email {\r\n\tpublic static function sendUserWelcome($user) {\r\n\t\t$emailManager = Yii::app()->emailManager;\r\n\r\n\t\t// build the templates\r\n\t\t$template = 'user_welcome';\r\n\t\t$message = $emailManager->buildTemplateMessage($template, array(\r\n\t\t\t'user' => $user,\r\n\t\t));\r\n\r\n\t\t// get the message\r\n\t\t$swiftMessage = Swift_Message::newInstance($message['subject']);\r\n\t\t$swiftMessage->setBody($message['message'], 'text/html');\r\n\t\t//$swiftMessage->addPart($message['text'], 'text/plain');\r\n\t\t$swiftMessage->setFrom($emailManager->fromEmail, $emailManager->fromName);\r\n\t\t$swiftMessage->setTo($user->email, $user->name);\r\n\r\n\t\t// spool the email\r\n\t\t$emailSpool = $emailManager->getEmailSpool($swiftMessage, $user);\r\n\t\t$emailSpool->priority = 10;\r\n\t\t$emailSpool->template = $template;\r\n\t\t$emailSpool->transport = 'smtp'; // send using smtp\r\n\t\treturn $emailSpool->save(false);\r\n\r\n\t\t// or send the email\r\n\t\t//return echo Yii::app()->emailManager->deliver($swiftMessage, 'mySmtpTransport');\r\n\t}\r\n}\r\n```\r\n\r\n\r\n#### PHP Templates\r\n\r\nSubject `views/emails/example/subject.php`:\r\n```php\r\n<?php echo 'hello' . $user->name;\r\n```\r\n\r\nHeading `views/emails/example/heading.php`:\r\n```php\r\n<?php echo 'Hi there ' . $user->name . ', Welcome to My Application';\r\n```\r\n\r\nMessage `views/emails/example/message.php`:\r\n```php\r\n<?php echo 'Here is an <b>awesome</b> email!';\r\n```\r\n\r\n\r\n#### DB Templates\r\n\r\nSubject\r\n```\r\nhello {{user.name}}\r\n```\r\n\r\nHeading\r\n```\r\nHi there {{user.name}}, Welcome to My Application\r\n```\r\n\r\nMessage\r\n```\r\nHere is an <b>awesome</b> email!\r\n```\r\n\r\n\r\n#### Sending the Email\r\n\r\nNow you can send an email like this:\r\n\r\n```php\r\n$user = User::model()->findByPk(123);\r\nEmail::sendUserWelcome($user);\r\n```\r\n\r\n\r\n### Sending Spooled Emails\r\n\r\nYou can send the spooled emails using the yiic command:\r\n\r\n```\r\nyiic emailSpool\r\n```\r\n\r\n\r\n### Automatically Sending\r\n\r\nSetup [lockrun](https://github.com/pushcx/lockrun) for overlap protection.  This allows us to setup a cron job that will run every minute, with no risk of a new process starting if an existing process is running.\r\n\r\nAdd the following to your crontab:\r\n```\r\n* * * * * /usr/local/bin/lockrun --idempotent --lockfile=/path/to/app/runtime/emailSpool.lock -- /path/to/yiic emailSpool loop > /dev/null 2>&1\r\n```\r\n\r\n\r\n### Extending EEmailManager\r\n\r\nBefore extending you should check the available configuration options.  In many occasions you can configure the `EEmailManager` class to behave as you require.\r\n\r\nIf you wish to extend for more complex functionality, you can simply update the class path in your yii config to point to your own `EmailManager` class, all the other configuration options will still be available:\r\n\r\n```php\r\nreturn array(\r\n\t'components' => array(\r\n\t\t'emailManager' => array(\r\n\t\t\t// path to the EmailManager class\r\n\t\t\t'class' => 'application.components.EmailManager',\r\n\t\t),\r\n\t),\r\n),\r\n```\r\n\r\nFor example, to make the app available to all templates and layouts, you can override `buildTemplateMessage()`:\r\n\r\n```php\r\nclass EmailManager extends EEmailManager {\r\n\tpublic function buildTemplateMessage($template, $viewParams = array(), $layout = 'layout_default') {\r\n\t\t$viewParams['app'] = Yii::app();\r\n\t\treturn parent::buildTemplateMessage($template, $viewParams, $layout);\r\n\t}\r\n}\r\n```\r\n\r\nIn your PHP templates, you can use:\r\n\r\n```php\r\n<?php echo 'My app, with ID=' . $app->id . ' is named ' . $app->name . '!';\r\n```\r\n\r\nIn your DB mustache templates, you can use:\r\n\r\n```\r\nMy app, with ID={{app.id}} is named {{app.name}}!\r\n```\r\n\r\n\r\n## FAQ\r\n\r\n\r\n### What is the difference between a template and a layout?\r\n\r\nEach of the **template** parts is rendered (`subject`, `heading` and `message`), and then those parts become variables in the **layout**.  \r\n\r\nThis allows features such as:\r\n- Consistent pretty message layouts\r\n- Your templates remain light with no need for any layout code\r\n- Easily change email layouts, for example, send the same email template in December with an xmas layout\r\n- Ability to prepend/append to the subject or heading at a more global level (for example if you want your site name in every email subject, you can set your layout subject to \"{{subject}} - My Awesome Site\"\r\n\r\nFor an example, let's take a look at a layout and template for a `subject` part:\r\n\r\n**TEMPLATE SUBJECT**\r\n```\r\nWelcome {{user.username}}\r\n```\r\n\r\n**LAYOUT SUBJECT**\r\n```\r\n{{subject}} - My Awesome Site\r\n```\r\n\r\n**GENERATED SUBJECT**\r\n```\r\nWelcome cornernote - My Awesome Site\r\n```\r\n\r\nAs you can see, the `subject` in the **layout** gets replaced by the parsed `subject` from the **template**.\r\n\r\n\r\n### Do layout variables `subject`, `heading` and `message` need to be defined when calling `buildTemplateMessage()` function?\r\n\r\nNo, these variables will be created internally based on your the 3 parts of the **template** (`subject`, `heading` and `message`), which will be passed into the **layout**.\r\n\r\n\r\n### Why does HTML code get replaced htmlencoded output when using db templates rendered with Mustache?\r\n\r\nMustache replaces `{{variables}}` with the htmlencoded value of the variable, unless you use `{{{tripple_culry_braces}}}`.  \r\n- `{{double_curly_braces}}` will be htmlencoded\r\n- `{{{tripple_culry_braces}}}` will allow html\r\n\r\n\r\n## Resources\r\n\r\n[![Mr PHP](https://raw.github.com/cornernote/mrphp-assets/master/img/code-banner.png)](http://mrphp.com.au) [![Github Project](https://raw.github.com/cornernote/mrphp-assets/master/vendor/github/github-latest-sourcecode-16.png)](https://github.com/cornernote/yii-email-module#yii-email-module) [![Yii Extension](https://raw.github.com/cornernote/mrphp-assets/master/vendor/yii/yii-extension-16.png)](http://www.yiiframework.com/extension/yii-email-module) [![Project Stats](https://www.ohloh.net/p/yii-email-module/widgets/project_thin_badge.gif)](https://www.ohloh.net/p/yii-email-module)\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/cornernote/yii-email-module/v/stable.png)](https://packagist.org/packages/cornernote/yii-email-module) [![Build Status](https://travis-ci.org/cornernote/yii-email-module.png?branch=master)](https://travis-ci.org/cornernote/yii-email-module) [![Dependencies Check](https://depending.in/cornernote/yii-email-module.png)](https://depending.in/cornernote/yii-email-module)\r\n\r\n- [YiiStrap](http://getyiistrap.com/)\r\n- [SwiftMailer](http://swiftmailer.org/)\r\n- [MustachePHP](https://github.com/bobthecow/mustache.php)\r\n- [Lockrun](https://github.com/pushcx/lockrun)\r\n- [Email Tests](http://codeception.com/12-15-2013/testing-emails-in-php)\r\n- Disposable Emails: [Mailinator](http://mailinator.com/) [MailDrop](http://maildrop.cc/) [YopMail](http://www.yopmail.com/en/) [10MinuteMail](http://10minutemail.com/)\r\n- Email Trappers: [MailTrap](http://mailtrap.io/) [MailCatcher](http://mailcatcher.me/)\r\n\r\n\r\n## Support\r\n\r\n- Does this README need improvement?  Go ahead and [suggest a change](https://github.com/cornernote/yii-email-module/edit/master/README.md).\r\n- Found a bug, or need help using this project?  Check the [open issues](https://github.com/cornernote/yii-email-module/issues) or [create an issue](https://github.com/cornernote/yii-email-module/issues/new).\r\n\r\n\r\n## License\r\n\r\n[BSD-3-Clause](https://raw.github.com/cornernote/yii-email-module/master/LICENSE), Copyright © 2013-2014 [Mr PHP](mailto:info@mrphp.com.au)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}